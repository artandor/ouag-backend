# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: [ 'controller.service_arguments' ]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\OpenApi\JwtDecorator:
        decorates: 'api_platform.openapi.factory'
        arguments: [ '@.inner' ]

    App\EventSubscriber\HashPasswordSubscriber:
        tags:
            - { name: doctrine.event_subscriber }

    App\EventSubscriber\GiftPlanningGenerationSubscriber:
        tags:
            - { name: doctrine.event_subscriber }

    AsyncAws\S3\S3Client:
        arguments:
            -   region: '%env(AWS_S3_REGION)%'
                endpoint: '%env(AWS_S3_BASE_URL)%'
                accessKeyId: '%env(AWS_S3_KEY)%'
                accessKeySecret: '%env(AWS_S3_SECRET_KEY)%'

    App\Doctrine\OwnerUserExtension:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection }

    App\EventSubscriber\JWTCreatedSubscriber:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

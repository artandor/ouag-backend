<?php

namespace App\Tests\Api;

use App\Entity\Gift;
use App\Entity\MediaObject;
use App\Entity\Planning;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;

class PlanningTest extends CustomApiTestCase
{
    use RefreshDatabaseTrait;

    public function testGetAllPlannings(): void
    {
        $client = self::createClientWithCredentials();
        $client->request('GET', '/plannings');
        $this->assertResponseStatusCodeSame(404);
    }

    public function testCreatePlanning(): void
    {
        $client = self::createClientWithCredentials();
        $client->request('POST', '/plannings', [
            'json' => [
                'media' => $this->findIriBy(MediaObject::class, ['title' => 'owned media']),
            ]
        ]);
        $this->assertResponseStatusCodeSame(404);
    }

    public function testUpdatePlanningWithMedia(): string
    {
        $client = self::createClientWithCredentials();

        $giftIri = $this->findIriBy(Gift::class, ['name' => 'Super gift']);

        $plannings = $client->request('GET', $giftIri . '/plannings');

        $this->assertResponseIsSuccessful();
        $this->assertMatchesResourceCollectionJsonSchema(Planning::class);

        $json = $plannings->toArray();

        $planningIri = $json['hydra:member'][0]['@id'];
        $client->request('PUT', $planningIri, [
            'json' => [
                'media' => $this->findIriBy(MediaObject::class, ['title' => 'owned media']),
            ]
        ]);

        $this->assertResponseIsSuccessful();
        $this->assertMatchesResourceItemJsonSchema(Planning::class);
        return $planningIri;
    }


    /**
     * @depends testUpdatePlanningWithMedia
     */
    public function testDeleteAPlannedMediaShouldRemoveItFromPlannings(string $planningIri): void
    {
        $client = self::createClientWithCredentials();

        $responseBeforeDelete = $client->request('GET', $planningIri);
        $this->assertNotNull($responseBeforeDelete->toArray()['media']);

        $iri = $this->findIriBy(MediaObject::class, ['title' => 'owned media']);
        $client->request('DELETE', $iri);

        $responseAfterDelete = $client->request('GET', $planningIri);
        $this->assertFalse(isset($responseAfterDelete->toArray()['media']));
    }

    /**
     * Plannings are generated by the gift, based on the media amount, therefore they shouldn't be manually deleted.
     */
    public function testDeletePlanning(): void
    {
        $client = self::createClientWithCredentials();

        $giftIri = $this->findIriBy(Gift::class, ['name' => 'Super gift']);

        $plannings = $client->request('GET', $giftIri . '/plannings');

        $this->assertResponseIsSuccessful();
        $this->assertMatchesResourceCollectionJsonSchema(Planning::class);

        $json = $plannings->toArray();

        $planningIri = $json['hydra:member'][0]['@id'];
        $client->request('DELETE', $planningIri);
        $this->assertResponseStatusCodeSame(405);
    }
}
